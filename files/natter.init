#!/bin/sh /etc/rc.common
# Copyright (C) 2022 muink
#
# depends bash coreutils-base64

. /lib/functions.sh

START=70
STOP=90
USE_PROCD=1
# natter
[ -x '/usr/sbin/nft' ] && FW='fw4' || FW='fw3'
PROG='/usr/sbin/natter'
HOOK='/usr/share/natter/natter-hook.sh'
TEMP='/usr/share/natter/natter-config.template.json'
SCRIPT='/etc/natter/custom-script.sh'
CHECK='/usr/libexec/natter/natcheck.sh'
CONF='/var/etc/natter-config.json'
LOGG='/var/natter/natter.log'
STAT='/var/natter/natter-status.json'
# uci
CONFIG_NAME='natter'
TYPEDSECTION='natter'
PORTRULES='portrule'



check_nat() {
	local n="$(${CHECK} $1 | base64)"
	[ "$n" == "VURQOiBGdWxsIGNvbmUgKE5BVCAxKSAKVENQOiBDb25lIE5BVCAK" -o \
	  "$n" == "VURQOiBPcGVuIEludGVybmV0IApUQ1A6IENvbmUgTkFUIAo=" ] && return 0 || return 1
}

# subnet_format <destination variable> <subnet>
# <subnet> format: 192.168.1.1/24
subnet_format() {
[ "$#" -ge 2 ] || return 1

local insubnet="$2"
local address=${insubnet%/*}
local mlen=${insubnet#*/}
local FULL_MASK_INT=$((0xFFFFFFFF))
local MASK_LEN=$mlen
local LEFT_MOVE="$(( 32 - ${MASK_LEN} ))"
local N="$(( ${FULL_MASK_INT} << ${LEFT_MOVE} ))"
local M1="$(( ($N & 0xFF000000) >> 24 ))"
local M2="$(( ($N & 0x00FF0000) >> 16 ))"
local M3="$(( ($N & 0x0000FF00) >> 8 ))"
local M4="$((  $N & 0x000000FF ))"
#local mask="$M1.$M2.$M3.$M4"
local outsubnet="$(echo $(for i in $(seq 1 4); do eval "echo \$(( \$(echo $address|cut -f$i -d'.') & \$M$i ))"; done)|sed 's| |.|g')/$mlen"
eval "$1=\$outsubnet"
}

init_natter() {
	mkdir -p "${LOGG%/*}" 2>/dev/null
	# clear up
	cat /dev/null > "$LOGG" > "$STAT"
	# init natter conf
	cp -f "$TEMP" "$CONF"

	[ "$1" == "" ] && return 0

	local ucivv="log_level keepalive_server"

	for _var in $ucivv; do
		eval "local $_var=\$(config_get $1 $_var 2>/dev/null)"
	done
	local tcp_stun=$(uci get $CONFIG_NAME.@$TYPEDSECTION[0].tcp_stun 2>/dev/null|sed -E "s/('[^']+'|[^' ]+)/'\1'/g; s|''|'|g; s|' '|',\\\n            '|g; s|'|\"|g; s|^|           |")
	local udp_stun=$(uci get $CONFIG_NAME.@$TYPEDSECTION[0].udp_stun 2>/dev/null|sed -E "s/('[^']+'|[^' ]+)/'\1'/g; s|''|'|g; s|' '|',\\\n            '|g; s|'|\"|g; s|^|           |")
	#config_list_foreach $1 udp_stun echo 2>/dev/null|sed "s|^|\"|g; s|$|\",|g; s|'|\"|g; \${s|,$||}"

	# white conf
	sed -Ei " \
		/\"logging\": \{/,/\},*$/{s|(\"level\": \")([^\"]*)|\1$log_level|; s|(\"log_file\": \")([^\"]*)|\1$LOGG|}; \
		/\"status_report\": \{/,/\},*$/{s|./natter-hook.sh|$HOOK|; s|(\"status_file\": \")([^\"]*)|\1$STAT|}; \
		s|(\"keep_alive\": \")([^\"]*)|\1$keepalive_server|; \
		/\"tcp\": \[/,/\],*$/{/\"[^\"]+\",*$/d}; \
		/\"udp\": \[/,/\],*$/{/\"[^\"]+\",*$/d}; \
	" "$CONF"
	# white stun_server
	sed -Ei "$(sed -En "/\"stun_server\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $tcp_stun" "$CONF"
	sed -Ei "$(sed -En "/\"stun_server\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $udp_stun" "$CONF"
}

apply_port_rules() {
	local rule_count=$(uci show natter|grep "$PORTRULES"|tail -n1|sed -En "s|.+@.+\[(.+)\].+|\1|p")
	local open_port_list_tcp open_port_list_udp forward_port_list_tcp forward_port_list_udp

for i in $(seq 0 1 $rule_count); do
	[ "$(uci get $CONFIG_NAME.@$PORTRULES[$i].enabled 2>/dev/null)" == "0" ] && continue
	[ "$(uci get $CONFIG_NAME.@$PORTRULES[$i].mode 2>/dev/null)" == "via" -a "$NAT_TYPE" == "#" ] && continue

	local ucivv="comment action mode bind_iface bind_port server_ip server_port proto"
	for _var in $ucivv; do
		eval "local $_var=\$(uci get $CONFIG_NAME.@$PORTRULES[$i].$_var 2>/dev/null)"
	done
	local bind_ip id protocols
	id=$(uci show $CONFIG_NAME.@$PORTRULES[$i] 2>/dev/null|head -n1|sed -E 's|.+\.(cfg[^=]+)=.+|\1|')
	[ "$bind_iface" == "" ] && bind_ip='0.0.0.0' || bind_ip="$(ip -4 -o addr|grep "$bind_iface"|sed -En "s|.+inet ([^/]+)/\d{2}.+|\1|p")"
	[ "$proto" == "both" ] && protocols="tcp udp" || protocols="$proto"

for proto in $protocols; do
	if   [ "$action" == "bind" ]; then
		# white open_port action==bind id comment *bind_iface bind_port proto
		eval "open_port_list_$proto=\"\$open_port_list_$proto'\${bind_ip}:\${bind_port}'\n\""
		# set firewall
		[ "$FW" == "fw3" ] && white_fw3_rule 'input' "$id" "$comment" "$proto" "$bind_iface" "$bind_port"
	elif [ "$action" == "forward" ]; then
		if   [ "$mode" == "dnat" ]; then
			# white forward_port action==forward mode==dnat id comment *bind_iface bind_port proto server_ip server_port
			eval "open_port_list_$proto=\"\$open_port_list_$proto'\${bind_ip}:\${bind_port}'\n\""
			# set firewall
			if  [ -n "$server_ip" ]; then
				[ -n "$(echo $server_ip|grep -E "^127(\.\d+){3}$")" ] && server_ip=$(uci -q get network.$(uci show network|grep "device='br-lan'"|cut -f2 -d'.').ipaddr)
			else
				>&2 echo -e "$(basename $0): server_ip is empty." && return 1
			fi
			[ "$FW" == "fw3" ] && white_fw3_rule 'dnat' "$id" "$comment" "$proto" "$bind_iface" "$bind_port" "$server_ip" "$server_port"
		elif [ "$mode" == "via" ]; then
			# white forward_port action==forward mode==via id comment proto server_ip server_port
			eval "forward_port_list_$proto=\"\$forward_port_list_$proto'\${server_ip}:\${server_port}'\n\""
		fi
	fi
done

done

# white conf
sed -Ei "$(sed -En "/\"open_port\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$open_port_list_tcp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"open_port\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$open_port_list_udp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"forward_port\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$forward_port_list_tcp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"forward_port\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$forward_port_list_udp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
}

# white_fw3_rule <type> <id> <comment> <proto> <bind_iface|bind_ip> <bind_port> [server_ip] [server_port]
white_fw3_rule() {
	[ "$#" -ge 5 ] || return 0
	local _type="$1" && shift
	local _id="$1" && shift
	local _comment="$1" && shift
	local _proto="$1" && shift
	local _bind_idev="$1" && shift
	local _bind_port="$1" && shift
	[ "$#" -ge 1 ] && local _server_ip="$1" && shift
	[ "$#" -ge 1 ] && local _server_port="$1" && shift

. /lib/functions/network.sh
# iptables -t filter -F NATTER 2>/dev/null
# iptables -t nat -F NATTER-PREROUTING 2>/dev/null
# iptables -t nat -F NATTER-PRELOOPBACK 2>/dev/null
# iptables -t nat -F NATTER-POSTLOOPBACK 2>/dev/null
local ext lan_addr lan_subnet
if  [ -n "$_bind_idev" ]; then
	[ -n "$(echo "$_bind_idev"|grep -E "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$")" ] && ext="-d ${_bind_idev}/32" || ext="-i $_bind_idev"
fi
network_get_ipaddr lan_addr $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
network_get_subnet lan_subnet $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
subnet_format lan_subnet "$lan_subnet"

if   [ "$_type" == "input" ]; then
	#ref:    -t filter -A zone_wan_input [ -i <wan_device: e.g. eth1> | -d <wan_addr: e.g. 100.64.0.1>/32 ] -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j ACCEPT
	iptables -t filter -A NATTER $ext -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment" -j ACCEPT
elif [ "$_type" == "dnat" ]; then
	#ref:    -t nat -A zone_wan_prerouting [ -i <wan_device: e.g. eth1> | -d <wan_addr: e.g. 100.64.0.1>/32 ] -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j DNAT --to-destination <intenal_server_ip>:<intenal_server_port>
	iptables -t nat -A NATTER-PREROUTING $ext -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment" -j DNAT --to-destination ${_server_ip}:${_server_port}
	#loopback
	#ref:    -t nat -A zone_lan_postrouting -s <lan_subnet: e.g. 192.168.1.0/24> -d <intenal_server_ip>/32 -p <protocol> -m <protocol> --dport <intenal_server_port> [ -m comment --comment "comment..." ] -j SNAT --to-source <lan_addr: e.g. 192.168.1.1>
	iptables -t nat -A NATTER-POSTLOOPBACK -s $lan_subnet -d ${_server_ip}/32 -p $_proto -m $_proto --dport ${_server_port} -m comment --comment "Natter_${_id}_$_comment (reflection)" -j SNAT --to-source $lan_addr
	#ext="-d <wanip/32>"
	#ref:    -t nat -A zone_lan_prerouting -s <lan_subnet: e.g. 192.168.1.0/24> [ -i <wan_device: e.g. eth1> | -d <wan_addr: e.g. 100.64.0.1>/32 ] -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j DNAT --to-destination <intenal_server_ip>:<intenal_server_port>
	iptables -t nat -A NATTER-PRELOOPBACK -s $lan_subnet $ext -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment (reflection)" -j DNAT --to-destination ${_server_ip}:${_server_port}
fi
}

natter_launch() {
	if   [ "$FW" == "fw4" ]; then
	elif [ "$FW" == "fw3" ]; then
		iptables -L NATTER >/dev/null 2>&1 || fw3 reload
	fi

	procd_open_instance
	procd_set_param command "$PROG"
	procd_append_param command -c "$CONF"
	[ "$logger" == "1" ] && \
	procd_set_param stdout 1 && \
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	local enabled

	config_load "$CONFIG_NAME"
	eval "enabled=\$CONFIG_${CONFIG_SECTIONS%% *}_enabled"
	[ "${enabled:=0}" == "0" ] && stop_service && return 1
	stop_service

	`check_nat` && NAT_TYPE=1 || NAT_TYPE=#
	config_foreach init_natter "$TYPEDSECTION"
	apply_port_rules
	[ $? == 0 ] && natter_launch
}

service_triggers() {
	procd_add_reload_trigger "$CONFIG_NAME" 'network'
}

stop_service() {
	for i in $(ps|grep 'natter.py'|grep -v 'grep'|grep -v $$|awk '{print $1}'); do kill -9 "$i" 2>/dev/null; done
	init_natter
	if   [ "$FW" == "fw4" ]; then
	elif [ "$FW" == "fw3" ]; then
		iptables -t filter -F NATTER 2>/dev/null
		iptables -t nat -F NATTER-PREROUTING 2>/dev/null
		iptables -t nat -F NATTER-PRELOOPBACK 2>/dev/null
		iptables -t nat -F NATTER-POSTLOOPBACK 2>/dev/null
	fi
}
