#!/bin/sh /etc/rc.common
# Copyright (C) 2022 muink
#
# depends bash coreutils-base64

. /lib/functions.sh

START=70
STOP=90
USE_PROCD=1
# natter
[ -x "$(which nft)" ] && FW='fw4' || FW='fw3'
PROG='/usr/sbin/natter'
HOOK='/usr/share/natter/natter-hook.sh'
TEMP='/usr/share/natter/natter-config.template.json'
SCRIPT='/etc/natter/custom-script.sh'
CHECK='/usr/libexec/natter/natcheck.sh'
CONF='/var/etc/natter-config.json'
LOGG='/var/natter/natter.log'
STAT='/var/natter/natter-status.json'
# uci
CONFIG_NAME='natter'
TYPEDSECTION='natter'
PORTRULES='portrule'


# check_nat [port]
check_nat() {
	local n="$(${CHECK} $1 | base64)"
	[ "$n" == "VURQOiBGdWxsIGNvbmUgKE5BVCAxKSAKVENQOiBDb25lIE5BVCAK" -o \
	  "$n" == "VURQOiBPcGVuIEludGVybmV0IApUQ1A6IENvbmUgTkFUIAo=" ] && return 0 || return 1
}

# subnet_format <destination variable> <subnet>
# <subnet> format: 192.168.1.1/24
subnet_format() {
[ "$#" -ge 2 ] || return 1

local insubnet="$2"
local address=${insubnet%/*}
local mlen=${insubnet#*/}
local FULL_MASK_INT=$((0xFFFFFFFF))
local MASK_LEN=$mlen
local LEFT_MOVE="$(( 32 - ${MASK_LEN} ))"
local N="$(( ${FULL_MASK_INT} << ${LEFT_MOVE} ))"
local M1="$(( ($N & 0xFF000000) >> 24 ))"
local M2="$(( ($N & 0x00FF0000) >> 16 ))"
local M3="$(( ($N & 0x0000FF00) >> 8 ))"
local M4="$((  $N & 0x000000FF ))"
#local mask="$M1.$M2.$M3.$M4"
local outsubnet="$(echo $(for i in $(seq 1 4); do eval "echo \$(( \$(echo $address|cut -f$i -d'.') & \$M$i ))"; done)|sed 's| |.|g')/$mlen"
eval "$1=\$outsubnet"
}

# init_natter [uci_section]
init_natter() {
	mkdir -p "${LOGG%/*}" 2>/dev/null
	mkdir -p "${CONF%/*}" 2>/dev/null
	# clear up
	cat /dev/null > "$LOGG" > "$STAT"

	[ "$1" == "" ] && return 0

	# init natter conf
	cp -f "$TEMP" "$CONF"

	local ucivv="log_level keepalive_server"

	for _var in $ucivv; do
		eval "local $_var=\$(config_get $1 $_var 2>/dev/null)"
	done
	local tcp_stun=$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].tcp_stun|sed -E "s/('[^']+'|[^' ]+)/'\1'/g; s|''|'|g; s|' '|',\\\n            '|g; s|'|\"|g; s|^|           |")
	local udp_stun=$(uci -q get $CONFIG_NAME.@$TYPEDSECTION[0].udp_stun|sed -E "s/('[^']+'|[^' ]+)/'\1'/g; s|''|'|g; s|' '|',\\\n            '|g; s|'|\"|g; s|^|           |")
	#config_list_foreach $1 udp_stun echo 2>/dev/null|sed "s|^|\"|g; s|$|\",|g; s|'|\"|g; \${s|,$||}"

	# white conf
	sed -Ei " \
		/\"logging\": \{/,/\},*$/{s|(\"level\": \")([^\"]*)|\1$log_level|; s|(\"log_file\": \")([^\"]*)|\1$LOGG|}; \
		/\"status_report\": \{/,/\},*$/{s|./natter-hook.sh|$HOOK|; s|(\"status_file\": \")([^\"]*)|\1$STAT|}; \
		s|(\"keep_alive\": \")([^\"]*)|\1$keepalive_server|; \
		/\"tcp\": \[/,/\],*$/{/\"[^\"]+\",*$/d}; \
		/\"udp\": \[/,/\],*$/{/\"[^\"]+\",*$/d}; \
	" "$CONF"
	# white stun_server
	sed -Ei "$(sed -En "/\"stun_server\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $tcp_stun" "$CONF"
	sed -Ei "$(sed -En "/\"stun_server\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $udp_stun" "$CONF"
}

apply_port_rules() {
	local rule_count=$(uci show $CONFIG_NAME|grep "$PORTRULES"|tail -n1|sed -En "s|.+@.+\[(.+)\].+|\1|p")
	local open_port_list_tcp open_port_list_udp forward_port_list_tcp forward_port_list_udp

for i in $(seq 0 1 $rule_count); do
	[ "$(uci -q get $CONFIG_NAME.@$PORTRULES[$i].enabled)" == "0" ] && continue
	[ "$(uci -q get $CONFIG_NAME.@$PORTRULES[$i].mode)" == "via" -a "$NAT_TYPE" == "#" ] && continue

	local ucivv="comment action mode bind_ifaces bind_port server_ip server_port proto"
	for _var in $ucivv; do
		eval "local $_var=\$(uci -q get $CONFIG_NAME.@$PORTRULES[$i].$_var)"
	done
	local bind_iface bind_ip id protocols
	id=$(uci show $CONFIG_NAME.@$PORTRULES[$i] 2>/dev/null|head -n1|sed -E 's|.+\.(cfg[^=]+)=.+|\1|')
	[ -z "$bind_ifaces" ] && bind_ifaces='none'
	[ "$proto" == "both" ] && protocols="tcp udp" || protocols="$proto"

for bind_iface in $bind_ifaces; do

	[ "$bind_iface" == "none" ] && bind_iface=''
	[ -z "$bind_iface" ] && bind_ip='0.0.0.0' || bind_ip="$(ip -4 -o addr|grep "$bind_iface"|sed -En "s|.+inet ([^/]+)/\d{2}.+|\1|p")"
	[ -z "$bind_ip" ] && continue

for proto in $protocols; do
	if   [ "$action" == "bind" ]; then
		# white open_port action==bind id comment *bind_iface bind_port proto
		eval "open_port_list_$proto=\"\$open_port_list_$proto'\${bind_ip}:\${bind_port}'\n\""
		# set firewall
		white_fw_rule 'input' "$id" "$comment" "$proto" "$bind_iface" "$bind_ip" "$bind_port"
	elif [ "$action" == "forward" ]; then
		if   [ "$mode" == "dnat" ]; then
			# white forward_port action==forward mode==dnat id comment *bind_iface bind_port proto server_ip server_port
			eval "open_port_list_$proto=\"\$open_port_list_$proto'\${bind_ip}:\${bind_port}'\n\""
			# set firewall
			[ -z "$server_ip" ] && >&2 echo -e "$(basename $0): server_ip is empty." && return 1
			white_fw_rule 'dnat' "$id" "$comment" "$proto" "$bind_iface" "$bind_ip" "$bind_port" "$server_ip" "$server_port"
		elif [ "$mode" == "via" ]; then
			# white forward_port action==forward mode==via id comment proto server_ip server_port
			[ "$server_ip" == "0.0.0.0" ] && server_ip='127.0.0.1'
			eval "forward_port_list_$proto=\"\$forward_port_list_$proto'\${server_ip}:\${server_port}'\n\""
		fi
	fi
done

done

done

# white conf
sed -Ei "$(sed -En "/\"open_port\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$open_port_list_tcp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"open_port\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$open_port_list_udp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"forward_port\": \{/,/\},*$/{ /\"tcp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$forward_port_list_tcp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
sed -Ei "$(sed -En "/\"forward_port\": \{/,/\},*$/{ /\"udp\": \[/=}" "$CONF")a\ $(echo $(echo -e "$forward_port_list_udp"|sort -u)|sed "s|' '|',\\\n            '|g; s|^'|           '|; s|'|\"|g")" "$CONF"
}

# white_fw_rule <type> <id> <comment> <proto> <bind_iface> <bind_ip> <bind_port> [server_ip] [server_port]
white_fw_rule() {
	[ "$#" -ge 6 ] || return 0
	local _type="$1" && shift
	local _id="$1" && shift
	local _comment="$1" && shift
	local _proto="$1" && shift
	local _bind_iface="$1" && shift
	local _bind_ip="$1" && shift
	local _bind_port="$1" && shift
	[ "$#" -ge 1 ] && local _server_ip="$1" && shift
	[ "$#" -ge 1 ] && local _server_port="$1" && shift

# iptables -t filter -F NATTER 2>/dev/null
# iptables -t nat -F NATTER-PREROUTING 2>/dev/null
# iptables -t nat -F NATTER-PRELOOPBACK 2>/dev/null
# iptables -t nat -F NATTER-POSTLOOPBACK 2>/dev/null
# nft add chain inet fw4 natter_input {}
# nft add chain inet fw4 natter_prerouting {}
# nft add chain inet fw4 natter_preloopback {}
# nft add chain inet fw4 natter_postloopback {}
local def_wan def_wan_dev def_wan_addr
local lan_addr lan_subnet
local wan_nets wan_net wan_devices wan_device wan_addrs wan_addr
if  [ -n "$_bind_iface" ]; then
	def_wan_dev=$_bind_iface
	def_wan_addr=$_bind_ip
else
network_find_wan def_wan 1
network_get_physdev def_wan_dev $def_wan
network_get_ipaddr def_wan_addr $def_wan
fi

network_get_ipaddr lan_addr $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
network_get_subnet lan_subnet $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
subnet_format lan_subnet "$lan_subnet"

[ -n "$(echo $_server_ip|grep -E "^0\.0\.0\.0$")" ]    && _server_ip=$def_wan_addr
[ -n "$(echo $_server_ip|grep -E "^127(\.\d+){3}$")" ] && _server_ip=$lan_addr

for i in $(uci -q show firewall|sed -En "s|.+@zone\[(\d+)\].masq='1'|\1|p"); do
	wan_nets=$(uci -q get firewall.@zone[$i].network)
	for wan_net in $wan_nets; do
		network_get_physdev wan_device $wan_net
		wan_devices="$wan_devices\n$wan_device"
	done
done
wan_devices="$(echo -e "$wan_devices"|sort -u|sed '/^$/d')"
for wan_device in $wan_devices; do
	network_get_ipaddr wan_addr $wan_device
	wan_addrs="$wan_addrs $(ip -4 -o addr|sed -En "s|^\d+: $wan_device\s+inet ([^/]+)/\d{2}.+|\1|p")"
done

case "$FW" in
	fw4)
		if   [ "$_type" == "input" ]; then
			#ref:                 input_wan [ iifname "<wan_device: e.g. eth1>" | ip daddr <wan_addr: e.g. 100.64.0.1> ] meta nfproto ipv4 <protocol> dport <bind_port> counter packets 0 bytes 0 accept [ comment "\"comment...\"" ]
			nft add rule inet fw4 natter_input iifname "\"$def_wan_dev\"" meta nfproto ipv4 $_proto dport ${_bind_port} counter packets 0 bytes 0 accept comment "\"natter_${_id}_$_comment\""
		elif [ "$_type" == "dnat" ]; then
			#ref:                 dstnat_wan [ iifname "<wan_device: e.g. eth1>" | ip daddr <wan_addr: e.g. 100.64.0.1> ] meta nfproto ipv4 <protocol> dport <bind_port> counter packets 0 bytes 0 dnat ip to <intenal_server_ip>:<intenal_server_port> [ comment "\"comment...\"" ]
			nft add rule inet fw4 natter_prerouting iifname "\"$def_wan_dev\"" meta nfproto ipv4 $_proto dport ${_bind_port} counter packets 0 bytes 0 dnat ip to ${_server_ip}:${_server_port} comment "\"natter_${_id}_$_comment\""
			#loopback
			#ref:                 srcnat_lan oifname "\"br-lan\"" ip saddr <lan_subnet: e.g. 192.168.1.0/24> ip daddr <intenal_server_ip> <protocol> dport <intenal_server_port> snat ip to <lan_addr: e.g. 192.168.1.1> [ comment "\"comment...\"" ]
			nft add rule inet fw4 natter_postloopback oifname "\"br-lan\"" ip saddr $lan_subnet ip daddr ${_server_ip} $_proto dport ${_server_port} snat ip to $lan_addr comment "\"natter_${_id}_$_comment (reflection)\""
			#ref:                 dstnat_lan iifname "\"br-lan\"" ip saddr <lan_subnet: e.g. 192.168.1.0/24> ip daddr <wan_addr: e.g. 100.64.0.1> <protocol> dport <bind_port> dnat ip to <intenal_server_ip>:<intenal_server_port> [ comment "\"comment...\"" ]
			nft add rule inet fw4 natter_preloopback iifname "\"br-lan\"" ip saddr $lan_subnet ip daddr ${def_wan_addr} $_proto dport ${_bind_port} dnat ip to ${_server_ip}:${_server_port} comment "\"natter_${_id}_$_comment (reflection)\""
		fi
	;;
	fw3)
		if   [ "$_type" == "input" ]; then
			#ref:    -t filter -A zone_wan_input [ -i <wan_device: e.g. eth1> | -d <wan_addr: e.g. 100.64.0.1>/32 ] -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j ACCEPT
			iptables -t filter -A NATTER -i $def_wan_dev -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment" -j ACCEPT
		elif [ "$_type" == "dnat" ]; then
			#ref:    -t nat -A zone_wan_prerouting [ -i <wan_device: e.g. eth1> | -d <wan_addr: e.g. 100.64.0.1>/32 ] -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j DNAT --to-destination <intenal_server_ip>:<intenal_server_port>
			iptables -t nat -A NATTER-PREROUTING -i $def_wan_dev -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment" -j DNAT --to-destination ${_server_ip}:${_server_port}
			#loopback
			#ref:    -t nat -A zone_lan_postrouting -s <lan_subnet: e.g. 192.168.1.0/24> -d <intenal_server_ip>/32 -p <protocol> -m <protocol> --dport <intenal_server_port> [ -m comment --comment "comment..." ] -j SNAT --to-source <lan_addr: e.g. 192.168.1.1>
			iptables -t nat -A NATTER-POSTLOOPBACK -s $lan_subnet -d ${_server_ip}/32 -p $_proto -m $_proto --dport ${_server_port} -m comment --comment "Natter_${_id}_$_comment (reflection)" -j SNAT --to-source $lan_addr
			#ref:    -t nat -A zone_lan_prerouting -s <lan_subnet: e.g. 192.168.1.0/24> -d <wan_addr: e.g. 100.64.0.1>/32 -p <protocol> -m <protocol> --dport <bind_port> [ -m comment --comment "comment..." ] -j DNAT --to-destination <intenal_server_ip>:<intenal_server_port>
			iptables -t nat -A NATTER-PRELOOPBACK -s $lan_subnet -d ${def_wan_addr}/32 -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "Natter_${_id}_$_comment (reflection)" -j DNAT --to-destination ${_server_ip}:${_server_port}
		fi
	;;
esac
}

get_wan_on_list() {
	local defined_device= ext_device

	for ext_device in $(uci -q show $CONFIG_NAME|grep 'bind_iface'|sed -E "s|.+@$PORTRULES\[(\d+)\].+'([^']+)'$|\1:\2|"); do
		if [ "$(uci -q get $CONFIG_NAME.@$PORTRULES[${ext_device%%:*}].enabled)" == "1" ]; then
			[ -n "$(echo "$defined_device"|grep "${ext_device##*:}")" ] && continue
			defined_device="$defined_device ${ext_device##*:}"
		fi
	done

	local wan_iface ext_iface
	network_find_wan wan_iface

	for ext_iface in $wan_iface; do
		network_get_device ext_device "$ext_iface"
		[ -z "$ext_device" ] && network_get_physdev ext_device "$ext_iface"
		[ -z "$ext_device" ] && continue
		[ -n "$(echo "$defined_device"|grep "$ext_device")" ] && continue
		defined_device="$defined_device $ext_device"
	done

echo $defined_device
}

natter_launch() {
	if   [ "$FW" == "fw4" ]; then
		nft -s -t -n list chain inet fw4 natter_input >/dev/null 2>&1 || fw4 reload
	elif [ "$FW" == "fw3" ]; then
		iptables -L NATTER >/dev/null 2>&1 || fw3 reload
	fi

	procd_open_instance
	procd_set_param command "$PROG"
	procd_append_param command -c "$CONF"
	procd_append_param netdev "br-lan"
	for ifname in $(get_wan_on_list); do
		procd_append_param netdev "$ifname"
	done
	procd_set_param respawn
	procd_set_param user root
	[ "$logger" == "1" ] && \
	procd_set_param stdout 1 && \
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	local enabled

	. /lib/functions/network.sh

	config_load "$CONFIG_NAME"
	eval "enabled=\$CONFIG_${CONFIG_SECTIONS%% *}_enabled"
	[ "${enabled:=0}" == "0" ] && stop_service && return 1
	stop_service

	`check_nat` && NAT_TYPE=1 || NAT_TYPE=#
	config_foreach init_natter "$TYPEDSECTION"
	apply_port_rules
	[ $? == 0 ] && natter_launch
}

service_triggers() {
	procd_add_reload_trigger "$CONFIG_NAME" 'network' 'firewall'

	local iface ifname

	iface=$(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
	[ -n "$iface" ] && procd_add_interface_trigger "interface.*.up" "$iface" /etc/init.d/natter reload

	for ifname in $(get_wan_on_list); do
		iface=$(uci show network|grep "device='$ifname'"|cut -f2 -d'.'|head -n1)
		[ -n "$iface" ] && procd_add_interface_trigger "interface.*.up" "$iface" /etc/init.d/natter reload
	done
}

stop_service() {
	for i in $(ps|grep 'natter.py'|grep -v 'grep'|grep -v $$|awk '{print $1}'); do kill -9 "$i" 2>/dev/null; done
	init_natter
	if   [ "$FW" == "fw4" ]; then
		nft flush chain inet fw4 natter_input 2>/dev/null
		nft flush chain inet fw4 natter_prerouting 2>/dev/null
		nft flush chain inet fw4 natter_preloopback 2>/dev/null
		nft flush chain inet fw4 natter_postloopback 2>/dev/null
	elif [ "$FW" == "fw3" ]; then
		iptables -t filter -F NATTER 2>/dev/null
		iptables -t nat -F NATTER-PREROUTING 2>/dev/null
		iptables -t nat -F NATTER-PRELOOPBACK 2>/dev/null
		iptables -t nat -F NATTER-POSTLOOPBACK 2>/dev/null
	fi
}

restart() {
	start
}
