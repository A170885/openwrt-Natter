#!/bin/sh
# natter integration for firewall3

IPTABLES="/usr/sbin/iptables"
IPTARGS="-w 1"

CONFIG_NAME='natter'
PORTRULES='portrule'

$IPTABLES -t filter -N NATTER 2>/dev/null
$IPTABLES -t nat -N NATTER-PREROUTING 2>/dev/null
$IPTABLES -t nat -N NATTER-PRELOOPBACK 2>/dev/null
$IPTABLES -t nat -N NATTER-POSTLOOPBACK 2>/dev/null

. /lib/functions/network.sh

#iptables -vS -t filter
#iptables -vS -t nat

# helper to insert in chain as penultimate
iptables_prepend_rule() {
	local iptables="$1"
	local table="$2"
	local chain="$3"
	local target="$4"

	$iptables "$IPTARGS" -t "$table" -I "$chain" $($iptables "$IPTARGS" -t "$table" --line-numbers -nL "$chain" | \
		sed -ne '$s/[^0-9].*//p') -j "$target"
}

add_extzone_rules() {
	local ext_zone="$1"

	[ -z "$ext_zone" ] && return

	# IPv4 - due to NAT, need to add both to nat and filter table
	# need to insert as penultimate rule for input & forward & postrouting since final rule might be a fw3 REJECT
	iptables_prepend_rule "$IPTABLES" filter "zone_${ext_zone}_input" NATTER
	$IPTABLES -t nat -A "zone_${ext_zone}_prerouting" -j NATTER-PREROUTING
}

add_intzone_rules() {
	local int_zone="$1"

	[ -z "$int_zone" ] && return

	$IPTABLES -t nat -A "zone_${int_zone}_prerouting" -j NATTER-PRELOOPBACK
	$IPTABLES -t nat -A "zone_${int_zone}_postrouting" -j NATTER-POSTLOOPBACK
}

# By default, user configuration is king.

defined_device=

for ext_device in $(uci -q show $CONFIG_NAME|grep 'bind_iface'|sed -E "s|.+@$PORTRULES\[(\d+)\].+'([^']+)'$|\1:\2|"); do
	if [ "$(uci -q get $CONFIG_NAME.@$PORTRULES[${ext_device%%:*}].enabled)" == "1" ]; then
		add_extzone_rules $(fw3 -q device "${ext_device##*:}")
		defined_device="$defined_device ${ext_device##*:}"
	fi
done

# If really nothing is available, resort to network_find_wan and
# assume external interfaces all have same firewall zone.

# (This heuristic may fail horribly, in case of e.g. multihoming, so
# please set external_zone in that case!)

network_find_wan wan_iface

for ext_iface in $wan_iface; do
	# fw3 -q network fails on sub-interfaces => map to device first
	network_get_device ext_device $ext_iface
	[ -n "$ext_device" -a -n "$(echo "$defined_device"|grep "$ext_device")" ] && continue
	add_extzone_rules $(fw3 -q device "$ext_device")
done

lan_iface=$(uci show network|grep "device='br-lan'"|cut -f2 -d'.')

for int_iface in $lan_iface; do
	# fw3 -q network fails on sub-interfaces => map to device first
	network_get_device int_device $int_iface
	add_intzone_rules $(fw3 -q device "$int_device")
done
